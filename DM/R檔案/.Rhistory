q()
male<-c(Bush=315,Perot=152,Clinton=337)
female<-c(Bush=346,Perot=126,Clinton=571)
rbind(male,female) #輸入男女資料後，排成矩陣
chisq.test(rbind(male,female))
data(iris)
summary(iris)
attach(iris)
head(iris,5)
male= c(Bush=315, Perot=152, Clinton=337)
female= c(Bush=346, Perot=126, Clinton=571)
rbind(male, female)
chisq.test(rbind(male, female))
citizen= c(sum(male), sum(female))
nba<-read.csv("C:\\Users\\Chih-Hsuan Wang\\Desktop\\R檔案\\2011NBA.csv", header=T, sep=",")
nba[1:5,]
nba<-read.csv("C:\\Users\\chihwang\\Desktop\\R檔案\\2011NBA.csv", header=T, sep=",")
nba[1:5,]
View(nba)
nba.clus<-nba[,-c(1,2)]     #排除資料集中的player與division文字欄位means<-apply(nba.clus, 2, mean)  #計算欄變數的平均數，2表column，1表row
sds<-apply(nba.clus, 2, sd)  #計算每欄變數的標準差，2表column，1表row
nba.clust<-scale(nba.clus, center=means, scale=sds)   #標準化欄變數，計算Z分數
means<-apply(nba.clus, 2, mean)
nba.clus<-scale(nba.clus, center=means, scale=sds)
View(nba.clus)
nba.dist<-dist(nba.clus, , method="euclidean")   #計算歐幾里得距離
nba.fit<-hclust(nba.dist, method="ward")
plot(nba.fit, labels=nba$player, main="NBA TOP25")  #繪製集群分析樹狀圖
rect.hclust(nba.fit, k=5, border="red")
View(nba)
cluster5<-cutree(nba.fit, k=5)     #指定集群分析為5群
nba$player[cluster5==1]
names(nba.fit)
names(cluster5)
cluster5
sapply(unique(cluster5), function(a)nba$player[cluster5==a])
sapply(unique(cluster5))
sapply(unique(cluster5), function(cluster5)nba$player)
nba.new<-cbind(nba, cbind(cluster5))
View(nba.new)
nba.new<-cbind(nba, cluster5)
View(nba.new)
cluster5
nba.new$cluster5<-factor(nba.new$cluster5, levels=c(1:5), labels=c("scorer", "defender", "point-guard", "combo-guard", "power-forward"))
table(nba.new$division, nba.new$cluster5)
nba.new[1:5,]
library(NbClust)
data("Titanic")
titanic0<-as.data.frame(Titanic)
str(titanic0)
titanic<-NULL
View(titanic0)
for (i in 1:4)
{
titanic<-cbind(titanic, rep(as.character(titanic0[, i]), titanic0$Freq))
}
View(titanic)
titanic<-as.data.frame(titanic)
names(titanic)<-names(titanic0) [1:4]
install.packages("arules")
library(arules)
install.packages("arules")
library(arules)
install.packages("arules")
install.packages("arules")
library(arules)
install.packages("arules")
library(arules)
install.packages("arulesViz")
library(arulesViz)
library(arulesViz)
rules2=apriori(Groceries, parameter=list(support=0.005, confidence=0.6))
plot(rules2, measure=c("support", "lift"), shading="confidence")
data("Groceries")
rules2=apriori(Groceries, parameter=list(support=0.005, confidence=0.6))
plot(rules2, measure=c("support", "lift"), shading="confidence")
install.packages("rpart")
library(rpart)
install.packages("randomForest")
library(randomForest)
install.packages("adabag")
library(adabag)
attach(iris)
ind<-sample(2, nrow(iris), replace=T, prob=c(0.6, 0.4))
tr.iris<-iris[ind==1, ]
ts.iris<-iris[ind==2, ]
iris.rf<-randomForest(Species~., data=tr.iris, ntree=50, importance=T, proximity=T, na.action=na.omit)
importance(iris.rf)
iris.rf$confusion
MDSplot(iris.rf, tr.iris$Species, pch=as.numeric(tr.iris$Species))
install.packages("clusterSim")
library(clusterSim)
IC_data <- read.csv("IC_design.csv")  # IC_資料集
IC_norm<-data.Normalization( IC_data[,1:24], type="n4", normalization="column")
setwd("C:/Users/chihwang/Desktop/R語言/R檔案")
IC_data <- read.csv("IC_design.csv")  # IC_資料集
IC_norm<-data.Normalization( IC_data[,1:24], type="n4", normalization="column")
IC.pca <- prcomp(IC_norm, center = TRUE, scale=TRUE) #主成分建模
eig <- (IC.pca$sdev)^2  #計算特徵值
variance <- eig*100/sum(eig)  #計算變異量百分比
cumvar <- cumsum(variance)
cumvar
pca.eig <- data.frame(eig = eig, variance = variance, cumvariance = cumvar)
plot_cul<-barplot(pca.eig [,2], names.arg=1:nrow(pca.eig), main = "Variances", xlab = "Principal Components", ylab = "Percentage of variances", col ="steelblue")
install.packages("psych")
library(psych)
IC.cor=cor(IC_data[,1:24])  #查看資料間之相關係數
View(IC.cor)
pc<- principal(IC.cor, scores=TRUE, rotate= "varimax")
pc
pc<- principal(IC.cor, 8, scores=TRUE, rotate= "varimax")
pc
pc<- principal(IC.cor, 6, scores=TRUE, rotate= "varimax")
pc
pc<- principal(IC.cor, 9, scores=TRUE, rotate= "varimax")
pc
pc<- principal(IC.cor, 10, scores=TRUE, rotate= "varimax")
pc
pc<- principal(IC.cor, nfactors=10, scores=TRUE, rotate= "varimax")
pc
names(pc)
round(pc$weights, 3)
pc$criteria
round(pc$weights, 3)  ##獲取主成分得分的係數
load <- pc$weights  ##計算新的座標值
ic.score=load[,1:8]
old <- as.matrix(IC_data)  ##將原始資料轉為矩陣格式
data1= old %*% ic.score
load <- pc$weights  ##計算新的座標值
ic.load=load[,1:8]  ##因為只取8個主成分
ic.score <- as.matrix(ic.load)  ##將因素計分轉為矩陣格式
old <- as.matrix(IC_data)  ##將原始資料轉為矩陣格式
data1= old %*% ic.score
load <- pc$weights  ##計算新的座標值
ic.score=load[,1:8]  ##因為只取8個主成分
old <- as.matrix(IC_data[, 1:24])  ##將原始資料轉為矩陣格式
data1= old %*% ic.score
View(data1)
plot(IC.pca, type="line", main="Screen Plot for IC-design")
pc
bartlett.test (IC_data[,1:24])
IC.fa <- fa(IC.cor, nfactors=7, rotate="varimax", fm="pa") #因素分析
print(IC.fa, digits = 3)
names(IC.fa)
fa.score <- factor.scores(IC.cor, f= IC.fa$loadings, method="Harman")
fa.score
names(fa.score)
fa.score$scores
fa.score$weights
fa.score <- factor.scores(IC.cor, f= IC.fa$loadings, method="Harman")
fa.score
names(fa.score)
fa.weight<- fa.score$weights
old=as.matrix(IC_data[,1:24])
data2<-old %*% fa.weight  #兩矩陣相乘
data2=data.frame(data2)
View(data2)
pc<- principal(IC.cor, nfactors=10, scores=TRUE, rotate= "varimax")
pc
